@mixin generate-declarations($declarations, $value) {
  @each $prop, $function-name in $declarations {
    #{$prop}: call($function-name, $value);
  }
}

$_sass-spring-animation-times: () !global;

// Outputs an @keyframes css animation
//
// @param {string} $name The name this animation will be referenced by.
// @param {map} $declarations A map of attributes to function names that generate property values
// @param {SpringOptions} $options Options generated by spring-rk4-options
@mixin create-spring($name, $declarations, $options, $delta: $default-delta) {
  @if type-of($name) != string {
    @error "$name must be string, found val '#{$name}'";
  }

  @if type-of($declarations) != map or type-of(map-get($declarations, nth(map-keys($declarations), 1))) != string {
    @error "$declarations must be maps of properties to names of functions that generate values";
  }

  @if map-get($_sass-spring-animation-times, $name) {
    @error "#{$name} animation was already created";
  }

  $total-time: spring-rk4-total-time($options);
  $_sass-spring-animation-times: map-merge($_sass-spring-animation-times, ($name: $total-time)) !global;

  @keyframes #{$name}-keyframes {
    $state: spring-rk4-initial-state($options);

    @while (not spring-rk4-finished($state)) {
      $step-percent: map-get($state, time) / $total-time;

      @if $step-percent < 1 {
        #{percentage($step-percent)} {
          @include generate-declarations($declarations, map-get($state, value));
        }
      }

      $state: spring-rk4-next($state, $options, $delta);
    }

    100% {
      @include generate-declarations($declarations, 1);
    }
  }
}

// @param {string} $name The same name used in create-spring
@mixin use-spring($name) {
  $time: map-get($_sass-spring-animation-times, $name);

  @if $time == null {
    @error "#{$name} animation not created yet (use create-spring before use-spring)";
  }
  animation-name: #{$name}-keyframes;
  animation-duration: #{$time}s;
  animation-timing-function: linear;
}

// @deprecated
@mixin generate-spring($class-name, $declarations, $options) {
  @warn "generate-spring is deprecated. Please use create-spring and use-spring";
  @include create-spring($class-name, $declarations, $options);

  .#{$class-name} {
    @include use-spring($class-name);
  }
}
